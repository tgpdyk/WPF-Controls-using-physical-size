<common:SectorUserControl x:Class="RadialMenuControl.Views.Gauge.RangeControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:conv="clr-namespace:RadialMenuControl.Converters"
             xmlns:menu="clr-namespace:RadialMenuControl"
             xmlns:common="clr-namespace:RadialMenuControl.Common"
             CenterPoint="{Binding Path=CenterPoint, RelativeSource={RelativeSource AncestorType={x:Type menu:SectorPanel}}}"
             Angle1="{Binding Path=Angle1, RelativeSource={RelativeSource AncestorType={x:Type menu:SectorPanel}}}" 
             Angle2="{Binding Path=Angle2, RelativeSource={RelativeSource AncestorType={x:Type menu:SectorPanel}}}" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             x:Name="RangeCtrl">
   
    <!-- Background Range. the Gray one! -->
    <Canvas x:Name="MainCanvas">
        <Canvas.Resources>
            <Storyboard x:Key="RangeValueAnimation" >
                <PointAnimationUsingPath Storyboard.TargetName="ArcSegmentValue"
                                     Storyboard.TargetProperty="Point"
                                     Completed="RangeValue_Storyboard_Completed"
                                     CurrentStateInvalidated="PointAnimationUsingPath_CurrentStateInvalidated"
                                      >
                    <PointAnimationUsingPath.PathGeometry>
                        <PathGeometry>
                            <PathFigure>
                                <ArcSegment x:Name="animationArc"
                                        IsLargeArc="False"
                                        IsStroked="True"/>
                            </PathFigure>
                        </PathGeometry>
                    </PointAnimationUsingPath.PathGeometry>
                </PointAnimationUsingPath>
            </Storyboard>

            <Storyboard x:Key="TextValueAnimation">
                <PointAnimationUsingPath Storyboard.TargetName="arcTextValue"
                                     Storyboard.TargetProperty="Point"
                                     Completed="TextValue_Storyboard_Completed">
                    <PointAnimationUsingPath.PathGeometry>
                        <PathGeometry>
                            <PathFigure>
                                <ArcSegment x:Name="animationTextValueArc"
                                        IsLargeArc="False"
                                        IsStroked="True"/>
                            </PathFigure>
                        </PathGeometry>
                    </PointAnimationUsingPath.PathGeometry>
                </PointAnimationUsingPath>
            </Storyboard>

            <Storyboard x:Key="TextValueAnimation2"
                        Completed="TextValue2_Storyboard_Completed">
                <DoubleAnimation Storyboard.TargetName="RangeCtrl"
                             Storyboard.TargetProperty="CurrentRangeValue"
                             IsCumulative="True"
                             >
                </DoubleAnimation>
            </Storyboard>
        </Canvas.Resources>
        <Path x:Name="PathRange"
              Stroke="Gray" 
              StrokeThickness="2.5"
              Opacity="0.2">
            <Path.Data>
                <PathGeometry>
                    <PathFigure x:Name="pathFig"
                                StartPoint="{Binding Path=Point1, ElementName=RangeCtrl}">
                            <ArcSegment  x:Name="theArc"
                                        IsStroked="True"
                                        SweepDirection="Clockwise"
                                        Point="{Binding Path=Point2, ElementName=RangeCtrl}"
                                        Size="{Binding Path=WheelSize, ElementName=RangeCtrl}"
                                        IsLargeArc="{Binding Path=IsLargeArc, ElementName=RangeCtrl}"
                                        RotationAngle="{Binding Path=Rotation, ElementName=RangeCtrl}"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

        <!-- The actual Value represented by arc with stroke color -->
        <Path x:Name="PathRangeValue"
              Stroke="{Binding Path=Background, ElementName=RangeCtrl}" 
              StrokeThickness="3"
              Loaded="PathRangeValue_Loaded">
            <Path.Data>
                <PathGeometry>
                    <PathFigure x:Name="PathFigureValue"
                                StartPoint="{Binding Path=Point1, ElementName=RangeCtrl}">
                        <ArcSegment x:Name="ArcSegmentValue"
                                    IsStroked="True"
                                    SweepDirection="Clockwise"
                                    Point="{Binding Path=ValuePoint, UpdateSourceTrigger=PropertyChanged, ElementName=RangeCtrl}"
                                    Size="{Binding Path=WheelSize, ElementName=RangeCtrl}"
                                    IsLargeArc="{Binding Path=IsLargeArc, ElementName=RangeCtrl}">
                        </ArcSegment>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>


        <!-- ***************** Hidden Path/Arc *******************************
        
            This is for the text value position. It tracks the X and Y to set
            the position of textvalue.
        
            *** Change the stroke of the path to make it visible and can be used for testing the value of range
        -->
        <Path x:Name="PathTextValue"
              Stroke="Transparent" 
              StrokeThickness="1">
            <Path.Data>
                <PathGeometry>
                    <PathFigure x:Name="PathFigTextValue"
                                StartPoint="{Binding Path=TextValueSector.PointStart, ElementName=RangeCtrl}">
                        <ArcSegment  x:Name="arcTextValue"
                                     IsStroked="True"
                                     IsSmoothJoin="True"
                                     SweepDirection="Clockwise"
                                     Point="{Binding Path=ValuePoint, UpdateSourceTrigger=PropertyChanged}"
                                     Size="{Binding Path=TextValueSector.Size, ElementName=RangeCtrl}"
                                     IsLargeArc="False"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>
        <!-- ***************** Hidden Path/Arc ******************************* -->
        
        <TextBlock x:Name="TextValue"
                   FontSize="8"
                   Height="10"
                   Width="10"
                   IsHitTestVisible="False"
                   Foreground="Blue">
            <TextBlock.Text>
                <MultiBinding Converter="{conv:PointToValue}">
                    <Binding RelativeSource="{RelativeSource Self}"/>
                    <Binding ElementName="arcTextValue" Path="Point"/>
                    <Binding ElementName="RangeCtrl" Path="TextValuePosition"/>
                    <Binding Path="CurrentRangeValue" ElementName="RangeCtrl"/>
                    <Binding Path="TextValueFormat" ElementName="RangeCtrl"/>
                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type common:SectorUserControl}}"/>
                </MultiBinding>
            </TextBlock.Text>
        </TextBlock>

        <!-- Min and Max label -->
        <TextBlock x:Name="TextMin"
                   IsHitTestVisible="False"
                   FontSize="9"/>
        <TextBlock x:Name="TextMax"
                   IsHitTestVisible="False"
                   FontSize="9"/>
        
        <!--Needle -->
        <Path x:Name="PathSetPointNeedle"
              Stroke="{Binding Path=NeedleBrush, ElementName=RangeCtrl}" 
              StrokeThickness="2"
              Visibility="{Binding NeedleVisibility, ElementName=RangeCtrl}"
              MouseDown="PathSetPointNeedle_MouseDown"
              MouseUp="PathSetPointNeedle_MouseUp"
              MouseMove="PathSetPointNeedle_MouseMove">
            <Path.Style>
                <Style TargetType="Path">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsEditable, ElementName=RangeCtrl}" Value="True">
                            <Setter Property="Path.Cursor" Value="Hand"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Path.Style>
            <Path.Data>
                <PathGeometry>
                    <PathFigure x:Name="pathFigNeedle"
                                StartPoint="{Binding Path=NeedlePoint1, ElementName=RangeCtrl}">
                        <LineSegment x:Name="theLine"
                                     IsStroked="True"
                                     Point="{Binding Path=NeedlePoint2, ElementName=RangeCtrl}"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

        <!-- Needle2:
             ** this is a HACK! Just to have a bigger 
                scope of the mouse hover to drag the needle around
        -->
        <Path x:Name="PathSetPointNeedle2"
              Stroke="Transparent" 
              StrokeThickness="24"
              Visibility="{Binding NeedleVisibility, ElementName=RangeCtrl}"
              MouseDown="PathSetPointNeedle_MouseDown"
              MouseUp="PathSetPointNeedle_MouseUp"
              Canvas.ZIndex="0"
              MouseMove="PathSetPointNeedle_MouseMove">
            <Path.Style>
                <Style TargetType="Path">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsEditable, ElementName=RangeCtrl}" Value="True">
                            <Setter Property="Path.Cursor" Value="Hand"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Path.Style>
            <Path.Data>
                <PathGeometry>
                    <PathFigure x:Name="pathFigNeedle2"
                                StartPoint="{Binding Path=NeedlePoint1, ElementName=RangeCtrl}">
                        <LineSegment x:Name="theLine2"
                                     IsStroked="True"
                                     Point="{Binding Path=NeedlePoint2, ElementName=RangeCtrl}"/>
                    </PathFigure>
                </PathGeometry>
            </Path.Data>
        </Path>

        <!-- 
        Textbox for editing the value 
        Text="{Binding NeedleTextValue, UpdateSourceTrigger=Explicit, StringFormat=0,  ElementName=RangeCtrl}"
        
        -->
        <TextBox x:Name="BoxSetPoint"
                 HorizontalContentAlignment="Center"
                 VerticalContentAlignment="Center"
                 Loaded="BoxSetPoint_Loaded"
                 BorderBrush="{Binding Path=NeedleBrush, ElementName=RangeCtrl}"
                 FontWeight="Black"
                 FontSize="9"
                 Height="20"
                 Width="25"
                 Text="{Binding NeedleTextValue, UpdateSourceTrigger=Explicit, StringFormat=0,  ElementName=RangeCtrl}"
                 Visibility="{Binding NeedleVisibility, ElementName=RangeCtrl}"
                 Canvas.Top="{Binding Path=NeedleTextValuePoint.X, ElementName=RangeCtrl}"
                 Canvas.Left="{Binding Path=NeedleTextValuePoint.Y, ElementName=RangeCtrl}"
                 PreviewKeyDown="BoxSetPoint_PreviewKeyDown">
        </TextBox>
    </Canvas>
</common:SectorUserControl>
